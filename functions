#!/usr/bin/env bash

set_local_ssh_path() {
  if [[ $(grep 'key_path' ${DIR}/config) ]]; then
    export DEFAULT_SSH_PATH="$HOME/.ssh/id_rsa.pub"
    read -p "Enter path to SSH public key [${DEFAULT_SSH_PATH}]: " PUBKEY
    PUBKEY=${PUBKEY:-$DEFAULT_SSH_PATH}

    sed -i "s#key_path#${PUBKEY}#g" ${DIR}/config
  else
    READ_PUBKEY_VAR_LINE=$(sed -n 3p ${DIR}/config | tr -d '"')
    export PUBKEY=${READ_PUBKEY_VAR_LINE:18}
  fi
}

set_local_html_path() {
  if [[ $(grep 'html_path' ${DIR}/config) ]]; then
    export DEFAULT_HOST_HTML_PATH="/var/www/html"

    read -p "Where should we store drucker sites locally? [${DEFAULT_HOST_HTML_PATH}]: " HOST_HTML_PATH
    HOST_HTML_PATH=${HOST_HTML_PATH:-$DEFAULT_HOST_HTML_PATH}

    sed -i "s#html_path#${HOST_HTML_PATH}#g" ${DIR}/config
  else
    READ_HTML_VAR_LINE=$(sed -n 4p ${DIR}/config | tr -d '"')
    export HOST_HTML_PATH=${READ_HTML_VAR_LINE:23}
  fi
}

set_local_db_path() {
  if [[ $(grep 'db_path' ${DIR}/config) ]]; then
    export DEFAULT_HOST_DB_PATH="/var/lib/mysql"

    read -p "Where should we store database backups locally? [${DEFAULT_HOST_DB_PATH}]: " HOST_DB_PATH
    HOST_DB_PATH=${HOST_DB_PATH:-$DEFAULT_HOST_DB_PATH}

    sed -i "s#db_path#${HOST_DB_PATH}#g" ${DIR}/config
  else
    READ_DB_VAR_LINE=$(sed -n 5p ${DIR}/config | tr -d '"')
    export HOST_DB_PATH=${READ_DB_VAR_LINE:21}
  fi
}

load_container_files() {
  CONTAINER_DIR="containers"
  CONTAINER_FILES="variables requirements init ssh orchestration mirror base reverse_proxy web db search"

  for FILES in ${CONTAINER_FILES} ; do
    source "${DIR}/${CONTAINER_DIR}/${FILES}"
  done
}

validation() {
  if [[ -z ${SITENAME} ]]; then
    echo -e "\n${RED}You need to pass a sitename.${COLOR_ENDING}\n"
  elif [[ ! ${SITENAME} =~ [^[:digit:]] ]]; then
    echo -e "\n${RED}You cannot use only digits.${COLOR_ENDING}\n"
  elif [[ ${SITENAME} == *['!'@#\$%^\&*()_+-]* ]]; then
    echo -e "\n${RED}You cannot use any special character.${COLOR_ENDING}\n"
  fi
}

drucker_usage() {
cat <<EOF
${GREEN_HELP}--version${COLOR_ENDING_HELP}                         Returns the drucker version.

${GREEN_HELP}--dev [sitename,...]${COLOR_ENDING_HELP}              Prepare site(s) for development work with no caching and helper modules enabled.
                                  WARNING: when running automated tests, 'twig_debug' should be set to FALSE.

${GREEN_HELP}--prod [sitename,...]${COLOR_ENDING_HELP}             Opinionated setup with all known performance best practices enabled.

${GREEN_HELP}--create [sitename,...] [git_tag]${COLOR_ENDING_HELP} Creates arbitrary docroots, vHosts and corresponding databases.

${GREEN_HELP}--import [sitename,...]${COLOR_ENDING_HELP}           Imports the database, files and codebase from the web container's import directory.

${GREEN_HELP}--reinstall${COLOR_ENDING_HELP}                       Deletes the existing drucker codebase and database and reinstalls from the latest dev tarball.

${GREEN_HELP}--composer [sitename]${COLOR_ENDING_HELP}             Installs Drupal from a composer.json file.

${GREEN_HELP}--lightning [sitename,...] ${COLOR_ENDING_HELP}       Creates arbitrary Lightning docroots, vHosts and corresponding databases.

${GREEN_HELP}--delete [sitename,...]${COLOR_ENDING_HELP}           Deletes arbitrary docroots, vHosts and corresponding databases.

${GREEN_HELP}--tests${COLOR_ENDING_HELP}                           Runs the Ansible test suite.
EOF
exit 0
}

drucker_argument() {
  if [[ -n "${OPTION}" ]] && \
       [[ "${OPTION}" != "--version" ]] && \
       [[ "${OPTION}" != "--dev" ]] && \
       [[ "${OPTION}" != "--prod" ]] && \
       [[ "${OPTION}" != "--create" ]] && \
       [[ "${OPTION}" != "--import" ]] && \
       [[ "${OPTION}" != "--reinstall" ]] && \
       [[ "${OPTION}" != "--composer" ]] && \
       [[ "${OPTION}" != "--lightning" ]] && \
       [[ "${OPTION}" != "--delete" ]] && \
       [[ "${OPTION}" != "--tests" ]] && \
       [[ "${OPTION}" != "--help" ]]; then
    drucker_usage
  else
    case "$OPTION" in
      --version)
      DRUCKER_VERSION_CHECK=$(grep "DRUCKER_VERSION" ${DIR}/containers/variables | awk '{print $2}' | grep -oP 'DRUCKER_VERSION="\K[^"]+')
      latest_commit=$(cd ${DIR} && git rev-parse --short HEAD)

      if [[ ${DRUCKER_VERSION_CHECK} == 'dev' ]]; then
        echo ${DRUCKER_VERSION_CHECK}:${latest_commit}
        exit 0
      else
        echo ${DRUCKER_VERSION_CHECK}
        exit 0
     fi
      ;;
      --dev)
      if [[ "${OPTION}" == "--dev" ]] && [[ -z ${SITENAME} ]] || [[ ! ${SITENAME} =~ [^[:digit:]] ]]; then
        drucker_usage
      else
        # Comma-separated sitenames are split into single values for drucker to
        # get a list of sites to switch to development mode.
        for SITE in ${SITENAME//,/ }; do
          drupal_dev_mode
        done
        exit 0
      fi
      ;;
      --prod)
      if [[ "${OPTION}" == "--prod" ]] && [[ -z ${SITENAME} ]] || [[ ! ${SITENAME} =~ [^[:digit:]] ]]; then
        drucker_usage
      else
        # Comma-separated sitenames are split into single values for drucker to
        # get a list of sites to switch to production mode.
        for SITE in ${SITENAME//,/ }; do
          drupal_prod_mode
        done
        exit 0
      fi
      ;;
      --create)
      if [[ "${OPTION}" == "--create" ]] && [[ -z ${SITENAME} ]] || [[ ! ${SITENAME} =~ [^[:digit:]] ]] || [[ ${SITENAME} == *['!'@#\$%^\&*()_+-]* ]]; then
        validation
        drucker_usage
      else
        # Comma-separated sitenames are split into single values for drucker to
        # get a list of sites to create.
        for SITE in ${SITENAME//,/ }; do
          create_site
        done
        exit 0
      fi
      ;;
      --import)
      if [[ "${OPTION}" == "--import" ]] && [[ -z ${SITENAME} ]] || [[ ! ${SITENAME} =~ [^[:digit:]] ]] || [[ ${SITENAME} == *['!'@#\$%^\&*()_+-]* ]]; then
        validation
        drucker_usage
      else
        # Comma-separated sitenames are split into single values for drucker to
        # get a list of sites to import.
        for SITE in ${SITENAME//,/ }; do
          import_site
        done
        exit 0
      fi
      ;;
      --reinstall)
      if [[ "${OPTION}" == "--reinstall" ]] && [[ ! -z ${SITENAME} ]]; then
        drucker_usage
      else
        reinstall_drupal
        exit 0
      fi
      ;;
      --composer)
      if [[ "${OPTION}" == "--composer" ]] && [[ -z ${SITENAME} ]] || [[ ! ${SITENAME} =~ [^[:digit:]] ]] || [[ ${SITENAME} == *['!'@#\$%^\&*()_+,-]* ]]; then
        validation
        drucker_usage
      else
        drupal_composer
        exit 0
      fi
      ;;
      --lightning)
      if [[ "${OPTION}" == "--lightning" ]] && [[ -z ${SITENAME} ]] || [[ ! ${SITENAME} =~ [^[:digit:]] ]] || [[ ${SITENAME} == *['!'@#\$%^\&*()_+-]* ]]; then
        validation
        drucker_usage
      else
        # Comma-separated sitenames are split into single values for drucker to
        # get a list of Lightning sites to create.
        for SITE in ${SITENAME//,/ }; do
          drupal_lightning
        done
        exit 0
      fi
      ;;
      --delete)
      if [[ "${OPTION}" == "--delete" ]] && [[ -z ${SITENAME} ]]; then
        drucker_usage
      else
        # Comma-separated sitenames are split into single values for drucker to
        # get a list of sites to delete.
        for SITE in ${SITENAME//,/ }; do
          delete_site
        done
        exit 0
      fi
      ;;
      --tests)
      if [[ "${OPTION}" == "--tests" ]] && [[ ! -z ${SITENAME} ]]; then
        drucker_usage
        exit 0
      else
        run_tests
        exit 0
      fi
      ;;
      --help)
        drucker_usage
      exit 0
      ;;
    esac
  fi
}
