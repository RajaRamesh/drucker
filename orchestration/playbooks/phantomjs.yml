---
- name: Check if phantomjs is installed
  stat:
    path: "{{ phantomjs_binary }}"
  register: phantomjs

- name: Check if phantomjs can be updated
  command: phantomjs --version
  register: phantomjs_update
  when: phantomjs.stat.exists == true
  changed_when: phantomjs_update.stdout != "{{ phantomjs_stable_version }}"

- name: Check if phantomjs archive exists
  stat:
    path: phantomjs-{{ phantomjs_stable_version }}-linux-x86_64.tar.bz2
  register: phantomjs_archive

- name: Download latest phantomjs release
  get_url:
    url: "{{ phantomjs_download_link }}"
    dest: "{{ download_dir }}"
    validate_certs: no
  register: phantomjs_get_url_result
  until: "'OK' in phantomjs_get_url_result.msg"
  retries: 3
  delay: 10
  when: phantomjs.stat.exists == false or phantomjs_update.stdout != "{{ phantomjs_stable_version }}" and phantomjs_archive.stat.exists == false

- name: Extract phantomjs files
  unarchive:
    src: "{{ phantomjs_archive_path }}"
    dest: "{{ download_dir }}"
    copy: no
  when: phantomjs.stat.exists == false or phantomjs_update.stdout != "{{ phantomjs_stable_version }}"

- name: Delete outdated phantomjs executable
  file:
    path: "{{ phantomjs_binary }}"
    state: absent
  when: phantomjs.stat.exists == true and phantomjs_update.stdout != "{{ phantomjs_stable_version }}"

- name: Install phantomjs globally
  command: mv {{ phantomjs_archive_path }}/bin/phantomjs {{ user_programs_path }}
  when: phantomjs.stat.exists == false or phantomjs_update.stdout != "{{ phantomjs_stable_version }}"

- name: Make phantomjs executable
  file:
    path: "{{ phantomjs_binary }}"
    mode: 0755
  when: phantomjs.stat.exists == false or phantomjs_update.stdout != "{{ phantomjs_stable_version }}"

- name: Delete phantomjs temporary directory
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ phantomjs_temp_path }}"
    - "{{ phantomjs_archive_path }}"
  when: phantomjs.stat.exists == false or phantomjs_update.stdout != "{{ phantomjs_stable_version }}"
