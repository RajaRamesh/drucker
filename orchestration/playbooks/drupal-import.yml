---
- name: "IMPORT: Check if MySQL dump exists"
  stat:
    path: "{{ item }}"
  with_first_found:
    - files:
      - "{{ webroot }}/import/{{ sitename }}.sql.gz"
      - "{{ webroot }}/import/{{ sitename }}.sql"
      skip: true
  register: dump_detection
  ignore_errors: True

- set_fact:
    dump: "{{ dump_detection.results[0]['item'] }}"
  when: dump_detection.skipped is not defined

- name: "IMPORT: Create new database"
  mysql_db:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ mysql_port }}"
    config_file: "{{ my_cnf }}"
    name: "{{ sitename }}"
    state: present
  when: dump_detection.skipped is not defined

- name: "IMPORT: Restore MySQL dump"
  mysql_db:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ mysql_port }}"
    config_file: "{{ my_cnf }}"
    name: "{{ sitename }}"
    state: import
    target: "{{ dump }}"
  when: dump_detection.skipped is not defined

- name: "IMPORT: Check if archived database dump exists"
  stat:
    path: "{{ webroot }}/import/archives/{{ sitename }}"
  register: db_archive
  ignore_errors: True

- name: "IMPORT: Archive imported database dump"
  command: mv {{ dump }} {{ webroot }}/import/archives/
  when: dump_detection.skipped is not defined and db_archive.stat.exists == false

- name: "IMPORT: Check if docroot has already been deployed"
  stat:
    path: "{{ webroot }}/{{ sitename }}"
  register: docroot_check
  ignore_errors: True

- name: "IMPORT: Check if docroot exists"
  stat:
    path: "{{ webroot }}/import/{{ sitename }}"
  register: docroot_import
  ignore_errors: True

- name: "IMPORT: Import docroot"
  command: cp -R {{ webroot }}/import/{{ sitename }} {{ webroot }}/
  register: import_docroot
  when: docroot_check.stat.exists == false and docroot_import.stat.exists == true

- name: "IMPORT: Check if archived docroot exists"
  stat:
    path: "{{ webroot }}/import/archives/{{ sitename }}"
  register: docroot_archive
  ignore_errors: True

- name: "IMPORT: Archive imported docroot"
  command: mv {{ webroot }}/import/{{ sitename }} {{ webroot }}/import/archives/
  when: docroot_archive.stat.exists == false

- name: "IMPORT: Make sure permissions are correct"
  file:
    path: "{{ webroot }}/{{ sitename }}"
    owner: "{{ user }}"
    group: "{{ apache_user }}"
    recurse: yes
  when: docroot_check.stat.exists == false and docroot_import.stat.exists == true

- name: "IMPORT: Check if vHost exists"
  stat:
    path: /etc/apache2/sites-enabled/{{ sitename }}.conf
  register: apache_conf
  ignore_errors: True
  when: docroot_check.stat.exists == false

- name: "IMPORT: Deploy default vHost template"
  copy:
    src: files/apache-template.conf
    dest: /etc/apache2/sites-available/
    mode: 0644
  when: apache_conf.stat.exists == false

- name: "IMPORT: Rename default vHost template"
  command: mv /etc/apache2/sites-available/apache-template.conf /etc/apache2/sites-available/{{ sitename }}.conf
  when: apache_conf.stat.exists == false

- name: "IMPORT: Modify vHost"
  replace:
    dest: /etc/apache2/sites-available/{{ sitename }}.conf
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ sitename }}\2'
  when: apache_conf.stat.exists == false

- name: "IMPORT: Enable vHost"
  file:
    src: ../sites-available/{{ sitename }}.conf
    dest: /etc/apache2/sites-enabled/{{ sitename }}.conf
    state: link
  notify: Reload Apache
  when: apache_conf.stat.exists == false

- name: "IMPORT: Check if Drush aliases exist"
  stat:
    path: /etc/drush/site-aliases/{{ sitename }}.aliases.drushrc.php
  register: sitename_aliases

- name: "IMPORT: Deploy Drush aliases"
  copy:
    src: files/{{ user }}.aliases.drushrc.php
    dest: /etc/drush/site-aliases/{{ sitename }}.aliases.drushrc.php
    mode: 0644
  when: sitename_aliases.stat.exists == false

- name: "IMPORT: Update Drush aliases"
  replace:
    dest: /etc/drush/site-aliases/{{ sitename }}.aliases.drushrc.php
    regexp: '^(.*){{ user }}(.*)$'
    replace: '\1{{ sitename }}\2'
  when: sitename_aliases.stat.exists == false
