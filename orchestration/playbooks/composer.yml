---
- name: Check if Composer is installed
  stat:
    path: "{{ user_programs_path }}/composer"
  register: composer

- name: Check Composer version
  shell: composer --version | awk '{print $3}'
  register: composer_stable_release_check
  when: composer.stat.exists == true
  changed_when: composer_stable_release_check.stdout != "{{ composer_stable_release }}"

- name: Update Composer
  command: composer self-update
  when: composer.stat.exists == true and composer_stable_release_check.stdout != "{{ composer_stable_release }}"

- name: Install Composer globally
  get_url:
    url: https://getcomposer.org/composer.phar
    dest: "{{ user_programs_path }}/composer"
    validate_certs: no
  register: composer_get_url_result
  until: "'OK' in composer_get_url_result.msg"
  retries: 3
  delay: 10
  when: composer.stat.exists == false

- name: Make Composer executable
  file:
    path: "{{ user_programs_path }}/composer"
    mode: 0755
  when: composer.stat.exists == false

- name: Ensure Composer is up-to-date
  command: "{{ user_programs_path }}/composer self-update"
  when: composer.stat.exists == false

- name: Check if composer is in PATH
  shell: grep -o "export PATH=\"\$PATH:\$HOME/.composer/vendor/bin\"" /home/{{ user }}/.bashrc || echo "absent"
  register: composer_path
  changed_when: composer_path.stdout == "absent"

- name: Add composer to PATH
  lineinfile:
    dest: /home/{{ user }}/.bashrc
    line: export PATH="$PATH:$HOME/.composer/vendor/bin"
    insertafter: EOF
  when: composer_path.stdout == 'absent'

- name: Check if .composer directory exists
  stat:
    path: /home/{{ user }}/.composer
  register: composer_directory

- name: Create .composer directory
  file:
    path: /home/{{ user }}/.composer
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
    recurse: yes
  when: composer_directory.stat.exists == false
