---
- name: "COMMON: Create files directory"
  file:
    path: "{{ drupal_docroot }}/{{ default_site }}/files"
    state: directory
    mode: 02777
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Create libraries directory"
  file:
    path: "{{ drupal_docroot }}/libraries"
    state: directory
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Create simpletest directory"
  file:
    path: "{{ drupal_docroot }}/sites/simpletest"
    state: directory
    mode: 02777
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  when: new_site.stat.exists == false

- name: "COMMON: Make sure default site permissions are correct"
  file:
    path: "{{ drupal_docroot }}/{{ default_site }}"
    mode: 0755
  become: yes
  become_user: "{{ user }}"

- name: "COMMON: Create settings.php file"
  command: cp {{ drupal_docroot }}/{{ default_site }}/default.settings.php {{ drupal_docroot }}/{{ default_site }}/settings.php
  become: yes
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Create services.yml file"
  command: cp {{ drupal_docroot }}/{{ default_site }}/default.services.yml {{ drupal_docroot }}/{{ default_site }}/services.yml
  become: yes
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Ensure settings.php and services.yml have correct ownership"
  file:
    path: "{{ item }}"
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  with_items:
    - "{{ drupal_docroot }}/{{ default_site }}/settings.php"
    - "{{ drupal_docroot }}/{{ default_site }}/services.yml"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Add trusted_host_patterns in settings.php"
  blockinfile:
    dest: "{{ drupal_docroot }}/{{ default_site }}/settings.php"
    block: |
      $settings['trusted_host_patterns'] = [
        '^{{ sitename }}\.{{ tld }}$',
      ];
    insertafter: EOF
    marker: "# {mark} MANAGED TRUSTED_HOST_PATTERNS BLOCK"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Override default Configuration Management directory"
  blockinfile:
    dest: "{{ drupal_docroot }}/{{ default_site }}/settings.php"
    block: |
      $config_directories = [
        CONFIG_SYNC_DIRECTORY => '{{ drupal_root }}/{{ default_configuration_dir }}',
      ];
    insertafter: EOF
    marker: "# {mark} MANAGED CONFIGURATION MANAGEMENT OVERRIDE BLOCK"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Prepare settings.php for memcached support"
  blockinfile:
    dest: "{{ drupal_docroot }}/{{ default_site }}/settings.php"
    block: |
      /**
       * drucker comes with memcached pre-configured. You simply need to install the
       * memcache module and add the below lines to enable memcache support.
       * DO NOT uncomment this block as it's managed by Ansible.
       * $settings['cache']['default'] = 'cache.backend.memcache';
       * $settings['memcache']['servers'] = ['{{ db_ip }}:11211' => 'default'];
       */
    insertafter: EOF
    marker: "# {mark} MANAGED MEMCACHED BLOCK"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Ensure database is wiped before installing"
  mysql_db:
    login_user: "{{ db_creds }}"
    login_password: "{{ db_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ db_port }}"
    name: "{{ sitename }}"
    config_file: "{{ db_config }}"
    state: absent
  when: new_site.stat.exists == false

- name: "COMMON: Create new database"
  mysql_db:
    login_user: "{{ db_creds }}"
    login_password: "{{ db_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ db_port }}"
    name: "{{ sitename }}"
    config_file: "{{ db_config }}"
    state: present
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "COMMON: Check if new vHost exists"
  stat:
    path: "{{ sites_enabled }}/{{ sitename }}.conf"
  register: new_vhost_check
  ignore_errors: True

- name: "COMMON: Deploy default vHost template"
  copy:
    src: "{{ apache_template_source_file }}"
    dest: "{{ sites_available }}"
    mode: 0644
  when: new_vhost_check.stat.exists == false

- name: "COMMON: Rename default vHost template"
  command: mv {{ vhost_template }} {{ sites_available }}/{{ sitename }}.conf
  when: new_vhost_check.stat.exists == false

- name: "COMMON: Add support for php-fpm Fast-CGI"
  blockinfile:
    dest: "{{ sites_available }}/{{ sitename }}.conf"
    block: |6
                  ProxyPassMatch ^/(.*\.php(/.*)?)$ unix:/var/run/php/php{{ php_version }}-fpm.sock|fcgi://127.0.0.1:9000/var/www/html/SITENAME/docroot/
    insertafter: '^(.*)DocumentRoot(.*)$'
    marker: "# {mark} MANAGED PHP-FPM FAST-CGI BLOCK"
  when: new_vhost_check.stat.exists == false

- name: "COMMON: Modify new vHost"
  replace:
    dest: "{{ sites_available }}/{{ sitename }}.conf"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ sitename }}\2'
  when: new_vhost_check.stat.exists == false

- name: "COMMON: Enable new vHost"
  file:
    src: ../sites-available/{{ sitename }}.conf
    dest: "{{ sites_enabled }}/{{ sitename }}.conf"
    state: link
    force: yes
  register: test
  notify: Reload Apache
  when: new_vhost_check.stat.exists == false

- name: "COMMON: Check if new Drush alias exist"
  stat:
    path: "{{ drush_alias_path }}/{{ sitename }}.{{ drush_alias_extension }}"
  register: new_alias

- name: "COMMON: Deploy new Drush alias"
  copy:
    src: "{{ drush_alias_source_file }}"
    dest: "{{ drush_alias_path }}"
    mode: 0644
  when: new_alias.stat.exists == false
  ignore_errors: true

- name: "COMMON: Rename default Drush alias"
  command: mv {{ drush_alias_filepath }} {{ drush_alias_path }}/{{ sitename }}.{{ drush_alias_extension }}
  when: new_alias.stat.exists == false

- name: "COMMON: Modify Drush alias"
  replace:
    dest: "{{ drush_alias_path }}/{{ sitename }}.{{ drush_alias_extension }}"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ sitename }}\2'
  when: new_alias.stat.exists == false
