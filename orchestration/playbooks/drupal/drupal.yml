---
- include: playbooks/drupal/drupal-clone.yml

- name: Check if drucker site exists
  stat:
    path: "{{ drucker_site }}"
  register: drucker_site_check
  ignore_errors: True

- name: Create new site structure
  file:
    path: "{{ item }}"
    state: directory
    mode: 02755
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  with_items:
    - "{{ drucker_site }}"
    - "{{ drucker_site }}/config"
    - "{{ drucker_site }}/{{ default_configuration_dir }}"
  when: drucker_site_check.stat.exists == false

- name: Copy Drupal checkout into new site stucture
  command: cp -R {{ drupal_git_clone_path }} {{ drucker_docroot }}
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false

- name: Remove default .git directory
  file:
    path: "{{ drucker_docroot }}/.git"
    state: absent
  when: drucker_site_check.stat.exists == false

- name: Ensure we can manage remote MySQL databases
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - python-mysqldb
    - mysql-client

- name: Check if drucker database exists
  stat:
    path: "{{ db_data }}/{{ user }}"
  register: drucker_db

- name: Make sure default site has correct permissions
  file:
    path: "{{ drucker_site }}/{{default_site}}"
    state: directory
    mode: 02755
    owner: "{{ user }}"
    group: "{{ apache_user }}"

- name: Delete files directory when reinstalling
  file:
    path: "{{ files_dir }}"
    state: absent
  when: drucker_db.stat.exists == false

- name: Create files directory
  file:
    path: "{{ files_dir }}"
    state: directory
    mode: 0777
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Create libraries directory
  file:
    path: "{{ libraries_dir }}"
    state: directory
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Create simpletest directory
  file:
    path: "{{ simpletest_dir }}"
    state: directory
    mode: 0777
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false

- name: Delete settings.php file when reinstalling
  file:
    path: "{{ settings_php }}"
    state: absent
  when: drucker_db.stat.exists == false

- name: Create settings.php file
  command: cp {{ default_settings_php }} {{ settings_php }}
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Create services.yml file
  command: cp {{ default_services_yml }} {{ services_yml }}
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Add trusted_host_patterns in settings.php
  blockinfile:
    dest: "{{ settings_php }}"
    block: |
      $settings['trusted_host_patterns'] = [
        '^{{ user }}\.{{ tld }}$',
      ];
    insertafter: EOF
    marker: "# {mark} MANAGED TRUSTED_HOST_PATTERNS BLOCK"
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Prepare settings.php for memcached support
  blockinfile:
    dest: "{{ settings_php }}"
    block: |
      /**
       * drucker comes with memcached pre-configured. You simply need to install the
       * memcache module and add the below lines to enable memcache support.
       * DO NOT uncomment this block as it's managed by Ansible.
       * $settings['cache']['default'] = 'cache.backend.memcache';
       * $settings['memcache']['servers'] = ['{{ db_ip }}:11211' => 'default'];
       */
    insertafter: EOF
    marker: "# {mark} MANAGED MEMCACHED BLOCK"
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Override default Configuration Management directory
  blockinfile:
    dest: "{{ settings_php }}"
    block: |
      $config_directories = [
        CONFIG_SYNC_DIRECTORY => '{{ drucker_site }}/{{ default_configuration_dir }}',
      ];
    insertafter: EOF
    marker: "# {mark} MANAGED CONFIGURATION MANAGEMENT OVERRIDE BLOCK"
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Ensure drucker database is wiped before installing
  mysql_db:
    login_user: "{{ db_creds }}"
    login_password: "{{ db_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ db_port }}"
    name: "{{ user }}"
    config_file: "{{ db_config }}"
    state: absent
  when: drucker_site_check.stat.exists == false

- name: Create drucker database
  mysql_db:
    login_user: "{{ db_creds }}"
    login_password: "{{ db_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ db_port }}"
    name: "{{ user }}"
    config_file: "{{ db_config }}"
    state: present
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Check if drucker vHost exists
  stat:
    path: "{{ drucker_vhost }}"
  register: drucker_vhost_check
  ignore_errors: True

- name: Delete default vHost
  file:
    path: "{{ default_vhost }}"
    state: absent
  when: drucker_vhost_check.stat.exists == false

- name: Delete default vHost symlink
  file:
    path: "{{ default_vhost }}"
    state: absent
  when: drucker_vhost_check.stat.exists == false

- name: Deploy default vHost template
  copy:
    src: "{{ apache_template_source_file }}"
    dest: "{{ sites_available }}"
    mode: 0644
  when: drucker_vhost_check.stat.exists == false

- name: Rename default vHost template
  command: mv {{ vhost_template }} {{ drucker_available_vhost }}
  when: drucker_vhost_check.stat.exists == false

- name: Modify drucker vHost
  replace:
    dest: "{{ drucker_available_vhost }}"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ user }}\2'
  when: drucker_vhost_check.stat.exists == false

- name: Enable drucker vHost
  file:
    src: ../sites-available/{{ user }}.conf
    dest: "{{ drucker_vhost }}"
    state: link
    force: yes
  register: test
  notify: Reload Apache
  when: drucker_vhost_check.stat.exists == false

- name: Check if drucker Drush aliases exist
  stat:
    path: "{{ drucker_aliases }}"
  register: drucker_aliases

- name: Create site-aliases directory
  file:
    path: "{{ drush_aliases_path }}"
    state: directory
  when: drucker_aliases.stat.exists == false

- name: Deploy drucker Drush aliases
  copy:
    src: "{{ drush_aliases_source_file }}"
    dest: "{{ drush_aliases_path }}"
    mode: 0644
  when: drucker_aliases.stat.exists == false
  ignore_errors: true

- name: Rename default Drush aliases
  command: mv {{ drush_aliases_filepath }} {{ drush_aliases_path }}/{{ user }}.aliases.drushrc.php
  when: drucker_aliases.stat.exists == false

- name: Modify Drush aliases
  replace:
    dest: "{{ drush_aliases_path }}/{{ user }}.aliases.drushrc.php"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ user }}\2'
  when: drucker_aliases.stat.exists == false

- name: Create .drush directory
  file:
    path: "{{ drush_dir }}"
    state: directory
    mode: 0755
    owner: "{{ user }}"
    group: "{{ user }}"
  when: drucker_aliases.stat.exists == false

- name: Pull vendor dependencies
  composer:
    command: install
    working_dir: "{{ drucker_docroot }}"
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false

- name: Install Drupal
  command: drush @{{ user }}.{{ tld }} site-install standard install_configure_form.update_status_module='array(FALSE,FALSE)' -qy --db-url=mysql://{{ db_creds }}:{{ db_creds }}@{{ db_ip }}:{{ db_port }}/{{ user }} --site-name={{ user }} --site-mail={{ drupal_creds }}@{{ user }}.{{ tld }} --account-name={{ drupal_creds }} --account-pass={{ drupal_creds }} --account-mail={{ drupal_creds }}@{{ user }}.{{ tld }}
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

- name: Check if phpunit.xml file exists
  stat:
    path: "{{ phpunit_xml }}"
  register: phpunit

- name: Deploy phpunit.xml file
  copy:
    src: "{{ phpunit_source_file }}"
    dest: "{{ drucker_docroot }}/core/"
    mode: 0644
  become: yes
  become_user: "{{ user }}"
  when: phpunit.stat.exists == false

- name: Modify phpunit.xml file
  replace:
    dest: "{{ phpunit_xml }}"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ user }}\2'
  when: phpunit.stat.exists == false

- name: Check if import directories exist
  stat:
    path: "{{ item }}"
  with_items:
    - "{{ import_dir }}"
    - "{{ archives_dir }}"
  register: import_directories
  ignore_errors: True

- name: Create import directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  with_items:
    - "{{ import_dir }}"
    - "{{ archives_dir }}"
  when: import_directories.results[0]['item'] or import_directories.results[1]['item']

- name: Add new site under version control
  shell: git -C "{{ drucker_site }}" init
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false

- name: Check if .gitignore exists
  stat:
    path: "{{ drupal_gitignore }}"
  register: gitignore
  ignore_errors: True

- name: Create .gitignore file
  copy:
    src: "{{ gitignore_source_file }}"
    dest: "{{ drucker_site }}"
    mode: 0644
  become: yes
  become_user: "{{ user }}"
  when: gitignore.stat.exists == false

- name: Add all new files under version control
  shell: git -C {{ drucker_site }} add --all . && git -C {{ drucker_site }} commit -m "Initial drucker commit"
  become: yes
  become_user: "{{ user }}"
  when: drucker_site_check.stat.exists == false

#- name: Set up Drupal Console to work with the new docroot 1/2
#  composer:
#    command: require
#    arguments: "{{ drupal_console_composer_package }}:{{ drupal_console_composer_package_version }} --prefer-dist --optimize-autoloader"
#    working_dir: "{{ drucker_docroot }}"
#  become: yes
#  become_user: "{{ user }}"
#  when: drucker_site_check.stat.exists == false
#
#- name: Set up Drupal Console to work with the new docroot 2/2
#  composer:
#    command: update
#    arguments: "{{ drupal_console_composer_package }} --with-dependencies"
#    working_dir: "{{ drucker_docroot }}"
#  become: yes
#  become_user: "{{ user }}"
#  when: drucker_site_check.stat.exists == false

- name: Check if Drupal Console has been configured in .bashrc
  shell: grep -o "source \"\$HOME/.console/console.rc\" 2>/dev/null" {{ bashrc }} || echo "absent"
  register: drupal_console_bashrc
  changed_when: drupal_console_bashrc.stdout == "absent"

#- name: Initialize Drupal Console
#  command: drupal init --root={{ drucker_docroot }} --override --no-interaction
#  become: yes
#  become_user: "{{ user }}"
#  when: drupal_console_bashrc.stdout == 'absent'

- name: Configure Drupal Console in .bashrc
  lineinfile:
    dest: "{{ bashrc }}"
    line: "source \"$HOME/.console/console.rc\" 2>/dev/null"
    insertafter: EOF
  when: drupal_console_bashrc.stdout == 'absent'

- name: Make sure files dir ownership is correct
  file:
    path: "{{ files_dir }}"
    owner: "{{ user }}"
    group: "{{ apache_user }}"
    recurse: yes
  when: drucker_site_check.stat.exists == false or drucker_db.stat.exists == false

#- name: Add new vendor files under version control
#  shell: git -C "{{ drucker_site }}" add --all . && git -C "{{ drucker_site }}" commit -m "Extra commit for vendor files"
#  become: yes
#  become_user: "{{ user }}"
#  when: drucker_site_check.stat.exists == false

- name: Check if all hostnames are configured
  shell: grep -E '({{ phpmyadmin_hostname }}.{{ tld }}|{{ adminer_hostname }}.{{ tld }})' {{ hosts_file }} || echo "absent"
  register: additional_hostnames
  changed_when: additional_hostnames.stdout == "absent"

- name: Make sure the web container can reach all hostnames
  shell: echo "{{ web_ip }}    {{ item }}.{{ tld }}" >> {{ hosts_file }}
  with_items:
  - "{{ phpmyadmin_hostname }}"
  - "{{ adminer_hostname }}"
  when: additional_hostnames.stdout == "absent"

- name: Check if Solr hostname is configured
  shell: grep -o "{{ search_ip }}" {{ hosts_file }} || echo "absent"
  register: search_hostname
  changed_when: search_hostname.stdout == "absent"

- name: Make sure Drupal can talk to the Solr backend
  shell: echo "{{ search_ip }}    search.{{ tld }}" >> {{ hosts_file }}
  when: search_hostname.stdout == "absent"
