---
- include: playbooks/drupal/drupal-checkout.yml
  when: git_tag is undefined

- name: "CREATE: Check if new site exists"
  stat:
    path: "{{ drupal_root }}"
  register: new_site
  ignore_errors: True

- name: "CREATE: Create new site structure"
  file:
    path: "{{ item }}"
    state: directory
    mode: 02755
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  with_items:
    - "{{ drupal_root }}"
    - "{{ drupal_root }}/config"
  when: new_site.stat.exists == false

- name: "CREATE: Copy Drupal checkout into new site stucture"
  command: cp -R {{ drupal_git_clone_path }} {{ drupal_root }}
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "CREATE: Rename copied Drupal checkout with expected sitename"
  command: mv {{ drupal_root }}/drupal {{ drupal_root }}/docroot
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "CREATE: Remove default .git directory"
  file:
    path: "{{ drupal_root }}/docroot/.git"
    state: absent
  when: new_site.stat.exists == false

- name: "CREATE: Check if new database exists"
  stat:
    path: "{{ mysql_data }}/{{ sitename }}"
  register: new_db

- name: "CREATE: Make sure default site has correct permissions"
  file:
    path: "{{ drupal_root }}/{{ default_site }}"
    state: directory
    mode: 02755
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  when: new_site.stat.exists == false

- name: "CREATE: Create files directory"
  file:
    path: "{{ drupal_root }}/{{ default_site }}"
    state: directory
    mode: 02777
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Create libraries directory"
  file:
    path: "{{ drupal_root }}/docroot/libraries"
    state: directory
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Create simpletest directory"
  file:
    path: "{{ drupal_root }}/docroot/sites/simpletest"
    state: directory
    mode: 0777
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "CREATE: Create settings.php file"
  command: cp {{ drupal_root }}/{{ default_site }}/default.settings.php {{ drupal_root }}/{{ default_site }}/settings.php
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Create services.yml file"
  command: cp {{ drupal_root }}/{{ default_site }}/default.services.yml {{ drupal_root }}/{{ default_site }}/services.yml
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Ensure settings.php and services.yml have correct ownership"
  file:
    path: "{{ item }}"
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  with_items:
    - "{{ drupal_root }}/{{ default_site }}/settings.php"
    - "{{ drupal_root }}/{{ default_site }}/services.yml"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Add trusted_host_patterns in settings.php"
  blockinfile:
    dest: "{{ drupal_root }}/{{ default_site }}/settings.php"
    block: |
      $settings['trusted_host_patterns'] = [
        '^{{ sitename }}\.{{ tld }}$',
      ];
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Override default Configuration Management directory"
  blockinfile:
    dest: "{{ drupal_root }}/{{ default_site }}/settings.php"
    block: |
      $config_directories = [
        CONFIG_SYNC_DIRECTORY => '{{ drupal_root }}/{{ default_configuration_dir }}',
      ];
    insertafter: EOF
    marker: "# {mark} MANAGED CONFIGURATION MANAGEMENT OVERRIDE BLOCK"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Ensure database is wiped before installing"
  mysql_db:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ mysql_port }}"
    name: "{{ sitename }}"
    config_file: "{{ my_cnf }}"
    state: absent
  when: new_site.stat.exists == false

- name: "CREATE: Create new database"
  mysql_db:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ mysql_port }}"
    name: "{{ sitename }}"
    config_file: "{{ my_cnf }}"
    state: present
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Check if new vHost exists"
  stat:
    path: "{{ sites_enabled }}/{{ sitename }}.conf"
  register: new_vhost_check
  ignore_errors: True

- name: "CREATE: Deploy default vHost template"
  copy:
    src: "{{ apache_template_source_file }}"
    dest: "{{ sites_available }}"
    mode: 0644
  when: new_vhost_check.stat.exists == false

- name: "CREATE: Rename default vHost template"
  command: mv {{ vhost_template }} {{ sites_available }}/{{ sitename }}.conf
  when: new_vhost_check.stat.exists == false

- name: "CREATE: Modify new vHost"
  replace:
    dest: "{{ sites_available }}/{{ sitename }}.conf"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ sitename }}\2'
  when: new_vhost_check.stat.exists == false

- name: "CREATE: Enable new vHost"
  file:
    src: ../sites-available/{{ sitename }}.conf
    dest: "{{ sites_enabled }}/{{ sitename }}.conf"
    state: link
    force: yes
  register: test
  notify: Reload Apache
  when: new_vhost_check.stat.exists == false

- name: "CREATE: Check if new Drush aliases exist"
  stat:
    path: "{{ drush_aliases_path }}/{{ sitename }}.aliases.drushrc.php"
  register: new_aliases

- name: "CREATE: Deploy new Drush aliases"
  copy:
    src: "{{ drush_aliases_source_file }}"
    dest: "{{ drush_aliases_path }}"
    mode: 0644
  when: new_aliases.stat.exists == false
  ignore_errors: true

- name: "CREATE: Rename default Drush aliases"
  command: mv {{ drush_aliases_filepath }} {{ drush_aliases_path }}/{{ sitename }}.aliases.drushrc.php
  when: new_aliases.stat.exists == false

- name: "CREATE: Modify Drush aliases"
  replace:
    dest: "{{ drush_aliases_path }}/{{ sitename }}.aliases.drushrc.php"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ sitename }}\2'
  when: new_aliases.stat.exists == false

- name: "CREATE: Pull vendor dependencies"
  composer:
    command: install
    working_dir: "{{ drupal_root }}/docroot"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Install Drupal"
  command: drush @{{ sitename }}.{{ tld }} site-install standard install_configure_form.update_status_module='array(FALSE,FALSE)' -qy --db-url=mysql://{{ mysql_creds }}:{{ mysql_creds }}@{{ db_ip }}:{{ mysql_port }}/{{ sitename }} --site-name={{ sitename }} --site-mail={{ drupal_creds }}@{{ sitename }}.{{ tld }} --account-name={{ drupal_creds }} --account-pass={{ drupal_creds }} --account-mail={{ drupal_creds }}@{{ sitename }}.{{ tld }}
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false or new_db.stat.exists == false

- name: "CREATE: Check if phpunit.xml file exists"
  stat:
    path: "{{ drupal_root }}/docroot/core/phpunit.xml"
  register: new_phpunit

- name: "CREATE: Deploy phpunit.xml file"
  copy:
    src: "{{ phpunit_source_file }}"
    dest: "{{ drupal_root }}/docroot/core/"
    mode: 0644
  become: yes
  become_user: "{{ user }}"
  when: new_phpunit.stat.exists == false

- name: "CREATE: Modify phpunit.xml file"
  replace:
    dest: "{{ drupal_root }}/docroot/core/phpunit.xml"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ sitename }}\2'
  when: new_phpunit.stat.exists == false

- name: "CREATE: Add new site under version control"
  shell: git -C "{{ drupal_root }}" init
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "CREATE: Add all new files under version control"
  shell: git -C "{{ drupal_root }}" add --all . && git -C "{{ drupal_root }}" commit -m "Initial commit"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "CREATE: Check if .gitignore exists"
  stat:
    path: "{{ drupal_root }}/.gitignore"
  register: new_gitignore
  ignore_errors: True

- name: "CREATE: Create .gitignore file"
  copy:
    src: "{{ gitignore_source_file }}"
    dest: "{{ drupal_root }}"
    mode: 0644
    owner: "{{ user }}"
    group: "{{ apache_user }}"
  when: new_gitignore.stat.exists == false

- name: "CREATE: Set up Drupal Console to work with the new docroot 1/2"
  composer:
    command: require
    arguments: "{{ drupal_console_composer_package }}:{{ drupal_console_composer_package_version }} --prefer-dist --optimize-autoloader"
    working_dir: "{{ drupal_root }}/docroot"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "CREATE: Set up Drupal Console to work with the new docroot 2/2"
  composer:
    command: update
    arguments: "{{ drupal_console_composer_package }} --with-dependencies"
    working_dir: "{{ drupal_root }}/docroot"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false

- name: "CREATE: Add new vendor files under version control"
  shell: git -C "{{ drupal_root }}" add --all . && git -C "{{ drupal_root }}" commit -m "Extra commit for vendor files"
  become: yes
  become_user: "{{ user }}"
  when: new_site.stat.exists == false
