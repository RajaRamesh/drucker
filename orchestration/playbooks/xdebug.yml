---
- name: Check if Xdebug is installed
  stat:
    path: "{{ php_extensions }}/xdebug.so"
  register: xdebug

- name: Check if Xdebug can be updated
  shell: ls /tmp/xdebug-{{ xdebug_stable_release }}.tgz | grep -o {{ xdebug_stable_release }} || echo "absent"
  register: xdebug_update
  when: xdebug.stat.exists == true

- name: Download latest Xdebug release
  get_url:
    url: http://xdebug.org/files/xdebug-{{ xdebug_stable_release }}.tgz
    dest: /tmp
    validate_certs: no
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Extract Xdebug files
  unarchive:
    src: /tmp/xdebug-{{ xdebug_stable_release }}.tgz
    dest: /tmp/
    copy: no
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Compile Xdebug
  command: "{{ item }} chdir=/tmp/xdebug-{{ xdebug_stable_release }}"
  with_items:
    - /usr/bin/phpize
    - ./configure
    - /usr/bin/make
  register: compile_xdebug
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Copy compiled Xdebug extension
  command: cp /tmp/xdebug-{{ xdebug_stable_release }}/modules/xdebug.so {{ php_extensions }}/
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Delete Xdebug temporary directory
  file:
    path: /tmp/xdebug-{{ xdebug_stable_release }}
    state: absent
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Check Xdebug config in php.ini
  shell: grep -o "xdebug.so" {{ php_ini }} || echo "absent"
  register: xdebug_config

- name: Configure Xdebug in php.ini
  blockinfile:
    dest: "{{ php_ini }}"
    block: |
      zend_extension = {{ php_extensions }}/xdebug.so
      xdebug.remote_host=localhost
      xdebug.remote_port=9000
      xdebug.remote_enable=1
      xdebug.remote_autostart=1
      xdebug.profiler_enable=1
      xdebug.profiler_output_dir="/tmp/profiler"
      xdebug.idekey={{ xdebug_ide_key }}
      xdebug.max_nesting_level=256
    marker: ; {mark} MANAGED XDEBUG BLOCK
  when: xdebug_config.stdout == "absent"
