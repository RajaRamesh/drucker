---
- name: Check if Xdebug is installed
  stat:
    path: "{{ xdebug_extension_path }}"
  register: xdebug

- name: Check if Xdebug can be updated
  shell: ls {{ xdebug_archive_path }} | grep -o {{ xdebug_stable_release }} || echo "absent"
  register: xdebug_update
  when: xdebug.stat.exists == true
  changed_when: xdebug_update.stdout == "absent"

- name: Download latest Xdebug release
  get_url:
    url: "{{ xdebug_download_link }}"
    dest: "{{ download_dir }}"
    validate_certs: no
  register: xdebug_get_url_result
  until: "'OK' in xdebug_get_url_result.msg"
  retries: 3
  delay: 10
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Extract Xdebug files
  unarchive:
    src: "{{ xdebug_archive_path }}"
    dest: "{{ download_dir }}"
    copy: no
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Compile Xdebug
  command: "{{ item }} chdir={{ xdebug_unarchived_path }}"
  with_items:
    - /usr/bin/phpize
    - ./configure
    - /usr/bin/make
  register: compile_xdebug
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Copy compiled Xdebug extension
  command: cp {{ xdebug_unarchived_path }}/modules/{{ xdebug_extension_name }} {{ php_extensions }}
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Delete Xdebug temporary directory
  file:
    path: "{{ xdebug_unarchived_path }}"
    state: absent
  when: xdebug.stat.exists == false or xdebug_update.stdout != "{{ xdebug_stable_release }}"

- name: Check Xdebug config in php.ini
  shell: grep -o "{{ xdebug_extension_name }}" {{ php_ini }} || echo "absent"
  register: xdebug_config
  changed_when: xdebug_config.stdout == "absent"

- name: Configure Xdebug in php.ini
  blockinfile:
    dest: "{{ php_ini }}"
    block: |
      zend_extension = {{ xdebug_extension_path }}
      xdebug.remote_host={{ xdebug_remote_host }}
      xdebug.remote_port=9000
      xdebug.remote_enable=1
      xdebug.max_nesting_level=256
    marker: ; {mark} MANAGED XDEBUG BLOCK
  when: xdebug_config.stdout == "absent"
