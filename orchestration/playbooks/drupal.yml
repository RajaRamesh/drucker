---
- name: Check if latest Drupal dev archive exists
  stat:
    path: /tmp/drupal-{{ drupal_dev_release }}-dev.tar.gz
  register: drupal
  ignore_errors: True

- name: Download latest Drupal (dev) release
  get_url:
    url: https://ftp.drupal.org/files/projects/drupal-{{ drupal_dev_release }}-dev.tar.gz
    dest: /tmp
    validate_certs: no
  register: drupal_get_url_result
  until: "'OK' in drupal_get_url_result.msg"
  retries: 3
  delay: 10
  when: drupal.stat.exists == false

- name: Check if drucker docroot exists
  stat:
    path: "{{ webroot }}/{{ user }}"
  register: drucker
  ignore_errors: True

- name: Extract Drupal files
  unarchive:
    src: /tmp/drupal-{{ drupal_dev_release }}-dev.tar.gz
    dest: "{{ webroot }}"
    copy: no
  when: drucker.stat.exists == false

- name: Rename Drupal directory
  command: mv {{ webroot}}/drupal-{{ drupal_dev_release }}-dev {{ webroot }}/{{ user }}
  when: drucker.stat.exists == false

- name: Ensure we can manage remote MySQL databases
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - python-mysqldb

- name: Check if drucker database exists
  stat:
    path: "/var/lib/mysql/{{ user }}"
  register: drucker_db

- name: Delete files directory when reinstalling
  file:
    path: "{{ webroot }}/{{ user }}/{{default_site}}/files"
    state: absent
  when: drucker_db.stat.exists == false

- name: Create files directory
  file:
    path: "{{ webroot }}/{{ user }}/{{default_site}}/files"
    state: directory
    mode: 0777
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Create libraries directory
  file:
    path: "{{ webroot }}/{{ user }}/libraries"
    state: directory
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Create simpletest directory
  file:
    path: "{{ webroot }}/{{ user }}/sites/simpletest"
    state: directory
    mode: 0777
  when: drucker.stat.exists == false

- name: Delete settings.php file when reinstalling
  file:
    path: "{{ webroot }}/{{ user }}/{{default_site}}/settings.php"
    state: absent
  when: drucker_db.stat.exists == false

- name: Create settings.php file
  command: cp {{ webroot }}/{{ user }}/{{default_site}}/default.settings.php {{ webroot }}/{{ user }}/{{default_site}}/settings.php
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Add trusted_host_patterns in settings.php
  blockinfile:
    dest: "{{ webroot }}/{{ user }}/{{default_site}}/settings.php"
    block: |
      $settings['trusted_host_patterns'] = array(
        '^{{ user }}\.local$',
      );
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Ensure drucker database is wiped before installing
  mysql_db:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ mysql_port }}"
    name: "{{ user }}"
    config_file: "{{ my_cnf }}"
    state: absent
  when: drucker.stat.exists == false

- name: Create drucker database
  mysql_db:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ mysql_port }}"
    name: "{{ user }}"
    config_file: "{{ my_cnf }}"
    state: present
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Check if drucker vHost exists
  stat:
    path: "{{ sites_enabled }}/{{ user }}.conf"
  register: drucker_conf
  ignore_errors: True

- name: Delete default vHost
  file:
    path: "{{ sites_available }}/000-default.conf"
    state: absent
  when: drucker_conf.stat.exists == false

- name: Delete default vHost symlink
  file:
    path: "{{ sites_enabled }}/000-default.conf"
    state: absent
  when: drucker_conf.stat.exists == false

- name: Deploy default vHost template
  copy:
    src: files/apache-template.conf
    dest: "{{ sites_available }}"
    mode: 0644
  when: drucker_conf.stat.exists == false

- name: Rename default vHost template
  command: mv {{ sites_available }}/apache-template.conf {{ sites_available }}/{{ user }}.conf
  when: drucker_conf.stat.exists == false

- name: Modify drucker vHost
  replace:
    dest: "{{ sites_available }}/{{ user }}.conf"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ user }}\2'
  when: drucker_conf.stat.exists == false

- name: Enable drucker vHost
  file:
    src: ../sites-available/{{ user }}.conf
    dest: "{{ sites_enabled }}/{{ user }}.conf"
    state: link
  notify: Reload Apache
  when: drucker_conf.stat.exists == false

- name: Check if drucker Drush aliases exist
  stat:
    path: "{{ drush_aliases_path }}/{{ user }}.aliases.drushrc.php"
  register: drucker_aliases

- name: Create site-aliases directory
  file:
    path: "{{ drush_aliases_path }}"
    state: directory
  when: drucker_aliases.stat.exists == false

- name: Deploy drucker Drush aliases
  copy:
    src: files/{{ user }}.aliases.drushrc.php
    dest: "{{ drush_aliases_path }}/{{ user }}.aliases.drushrc.php"
    mode: 0644
  when: drucker_aliases.stat.exists == false

- name: Create .drush directory
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ user }}"
    group: "{{ user }}"
  with_items:
    - "{{ home }}/.drush"
    - /home/root/.drush
  when: drucker_aliases.stat.exists == false

- name: Install Drupal
  command: drush @{{ user }}.{{ tld }} site-install standard install_configure_form.update_status_module='array(FALSE,FALSE)' -qy --db-url=mysql://{{ mysql_creds }}:{{ mysql_creds }}@{{ db_ip }}:{{ mysql_port }}/{{ user }} --site-name={{ user }} --site-mail={{ drupal_creds }}@{{ user }}.{{ tld }} --account-name={{ drupal_creds }} --account-pass={{ drupal_creds }} --account-mail={{ drupal_creds }}@{{ user }}.{{ tld }}
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Check if phpunit.xml file exists
  stat:
    path: "{{ webroot }}/{{ user }}/core/phpunit.xml"
  register: phpunit

- name: Deploy phpunit.xml file
  copy:
    src: files/phpunit.xml
    dest: "{{ webroot }}/{{ user }}/core/"
    mode: 0644
  when: phpunit.stat.exists == false

- name: Create import directories
  file:
    path: "{{ webroot }}/{{ item }}"
    state: directory
  with_items:
    - import
    - import/archives

- name: Make sure files and dirs ownership is consistent
  file:
    path: "{{ webroot }}"
    owner: "{{ user }}"
    group: "{{ apache_user }}"
    mode: g+s
    recurse: yes

- name: Check if .gitignore exists
  stat:
    path: "{{ webroot }}/{{ user }}/.gitignore"
  register: gitignore
  ignore_errors: True

- name: Create .gitignore file
  copy:
    src: files/.gitignore
    dest: "{{ webroot }}/{{ user }}"
    mode: 0644
  become: yes
  become_user: "{{ user }}"
  when: gitignore.stat.exists == false

- name: Add all files under version control
  shell: cd {{ webroot }}/{{ user }}/ && git init && git add --all . && git commit -m "Initial commit"
  when: drucker.stat.exists == false
