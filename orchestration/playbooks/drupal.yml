---
- name: Check if latest Drupal dev archive exists
  stat:
    path: "{{ drupal_archive }}"
  register: drupal
  ignore_errors: True

- name: Download latest Drupal (dev) release
  get_url:
    url: "{{ drupal_download_link }}"
    dest: "{{ download_dir }}"
    validate_certs: no
  register: drupal_get_url_result
  until: "'OK' in drupal_get_url_result.msg"
  retries: 3
  delay: 10
  when: drupal.stat.exists == false

- name: Check if drucker docroot exists
  stat:
    path: "{{ docroot }}"
  register: drucker
  ignore_errors: True

- name: Extract Drupal files
  unarchive:
    src: "{{ drupal_archive }}"
    dest: "{{ webroot }}"
    copy: no
  when: drucker.stat.exists == false

- name: Rename Drupal directory
  command: mv {{ webroot}}/drupal-{{ drupal_dev_release }}-dev {{ docroot }}
  when: drucker.stat.exists == false

- name: Ensure we can manage remote MySQL databases
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - python-mysqldb

- name: Check if drucker database exists
  stat:
    path: "{{ mysql_data }}/{{ user }}"
  register: drucker_db

- name: Delete files directory when reinstalling
  file:
    path: "{{ files_dir }}"
    state: absent
  when: drucker_db.stat.exists == false

- name: Create files directory
  file:
    path: "{{ files_dir }}"
    state: directory
    mode: 0777
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Create libraries directory
  file:
    path: "{{ libraries_dir }}"
    state: directory
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Create simpletest directory
  file:
    path: "{{ simpletest_dir }}"
    state: directory
    mode: 0777
  when: drucker.stat.exists == false

- name: Delete settings.php file when reinstalling
  file:
    path: "{{ settings_php }}"
    state: absent
  when: drucker_db.stat.exists == false

- name: Create settings.php file
  command: cp {{ default_settings_php }} {{ settings_php }}
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Create services.yml file
  command: cp {{ default_services_yml }} {{ services_yml }}
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Add trusted_host_patterns in settings.php
  blockinfile:
    dest: "{{ settings_php }}"
    block: |
      $settings['trusted_host_patterns'] = array(
        '^{{ user }}\.{{ tld }}$',
      );
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Ensure drucker database is wiped before installing
  mysql_db:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ mysql_port }}"
    name: "{{ user }}"
    config_file: "{{ my_cnf }}"
    state: absent
  when: drucker.stat.exists == false

- name: Create drucker database
  mysql_db:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: "{{ db_ip }}"
    login_port: "{{ mysql_port }}"
    name: "{{ user }}"
    config_file: "{{ my_cnf }}"
    state: present
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Check if drucker vHost exists
  stat:
    path: "{{ drucker_vhost }}"
  register: drucker_vhost
  ignore_errors: True

- name: Delete default vHost
  file:
    path: "{{ default_vhost }}"
    state: absent
  when: drucker_vhost.stat.exists == false

- name: Delete default vHost symlink
  file:
    path: "{{ default_vhost }}"
    state: absent
  when: drucker_vhost.stat.exists == false

- name: Deploy default vHost template
  copy:
    src: "{{ apache_template_source_file }}"
    dest: "{{ sites_available }}"
    mode: 0644
  when: drucker_vhost.stat.exists == false

- name: Rename default vHost template
  command: mv {{ vhost_template }} "{{ drucker_available_vhost }}"
  when: drucker_vhost.stat.exists == false

- name: Modify drucker vHost
  replace:
    dest: "{{ drucker_available_vhost }}"
    regexp: '^(.*)SITENAME(.*)$'
    replace: '\1{{ user }}\2'
  when: drucker_vhost.stat.exists == false

- name: Enable drucker vHost
  file:
    src: ../sites-available/{{ user }}.conf
    dest: "{{ drucker_vhost }}"
    state: link
    force: yes
  notify: Reload Apache
  when: drucker_vhost.stat.exists == false

- name: Check if drucker Drush aliases exist
  stat:
    path: "{{ drucker_aliases }}"
  register: drucker_aliases

- name: Create site-aliases directory
  file:
    path: "{{ drush_aliases_path }}"
    state: directory
  when: drucker_aliases.stat.exists == false

- name: Deploy drucker Drush aliases
  copy:
    src: "{{ drucker_aliases_source_file }}"
    dest: "{{ drucker_aliases }}"
    mode: 0644
  when: drucker_aliases.stat.exists == false
  ignore_errors: true

- name: Create .drush directory
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ user }}"
    group: "{{ user }}"
  with_items:
    - "{{ drush_dir }}"
    - /home/root/.drush
  when: drucker_aliases.stat.exists == false

- name: Install Drupal
  command: drush @{{ user }}.{{ tld }} site-install standard install_configure_form.update_status_module='array(FALSE,FALSE)' -qy --db-url=mysql://{{ mysql_creds }}:{{ mysql_creds }}@{{ db_ip }}:{{ mysql_port }}/{{ user }} --site-name={{ user }} --site-mail={{ drupal_creds }}@{{ user }}.{{ tld }} --account-name={{ drupal_creds }} --account-pass={{ drupal_creds }} --account-mail={{ drupal_creds }}@{{ user }}.{{ tld }}
  when: drucker.stat.exists == false or drucker_db.stat.exists == false

- name: Check if phpunit.xml file exists
  stat:
    path: "{{ phpunit_xml }}"
  register: phpunit

- name: Deploy phpunit.xml file
  copy:
    src: "{{ phpunit_source_file }}"
    dest: "{{ docroot }}/core/"
    mode: 0644
  when: phpunit.stat.exists == false

- name: Check if import directories exist
  stat:
    path: "{{ item }}"
  with_items:
    - "{{ import_dir }}"
    - "{{ archives_dir }}"
  register: import_directories
  ignore_errors: True

- name: Create import directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ user }}"
    group: "{{ user }}"
  with_items:
    - "{{ import_dir }}"
    - "{{ archives_dir }}"
  when: import_directories.results[0]['item'] or import_directories.results[1]['item']

- name: Make sure files and dirs ownership is consistent
  file:
    path: "{{ webroot }}"
    owner: "{{ user }}"
    group: "{{ apache_user }}"
    mode: g+s
    recurse: yes

- name: Check if .gitignore exists
  stat:
    path: "{{ drupal_gitignore }}"
  register: gitignore
  ignore_errors: True

- name: Create .gitignore file
  copy:
    src: "{{ gitignore_source_file }}"
    dest: "{{ docroot }}"
    mode: 0644
  become: yes
  become_user: "{{ user }}"
  when: gitignore.stat.exists == false

- name: Add all files under version control
  shell: cd {{ docroot }}/ && git init && git add --all . && git commit -m "Initial commit"
  when: drucker.stat.exists == false
