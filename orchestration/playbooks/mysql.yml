---
- name: Check if MySQL is installed
  stat:
    path: "{{ my_cnf }}"
  register: mysql
  ignore_errors: True

# ToDo: back up MySQL databases prior to deleting everything.

- name: Clean up MySQL data directory
  shell: rm -Rf {{ mysql_data }}/* warn=False
  when: mysql.stat.exists == false

- name: Install MySQL APT repository config tool
  apt:
    deb: http://dev.mysql.com/get/mysql-apt-config_{{ mysql_apt_config_tool }}_all.deb
  when: mysql.stat.exists == false

- name: Install MySQL and utilities
  package:
    name: "{{ item }}"
    state: installed
    force: yes
    update_cache: yes
  with_items:
    - mysql-community-server
    - python-mysqldb
    - mytop
    # memcached
  when: mysql.stat.exists == false

- name: Set innodb_file_per_table
  lineinfile:
    dest: "{{ my_cnf }}"
    insertafter: "[mysql]"
    line: "innodb_file_per_table = 1"
  when: mysql.stat.exists == false

- name: Check if MySQL is configured to allow remote access
  shell: grep -o "0.0.0.0" {{ my_cnf }} || echo "denied"
  register: mysql_remote_access
  changed_when: mysql_remote_access == "denied"

- name: Configure MySQL to allow remote access
  replace:
    dest: "{{ my_cnf }}"
    regexp: '^(.*)127.0.0.1(.*)$'
    replace: '\1 0.0.0.0\2'
  when: mysql_remote_access.stdout == "denied"

- name: Start MySQL
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - mysql
  when: mysql.stat.exists == false

- name: Set MySQL root user password
  mysql_user:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    name: "{{ mysql_creds }}"
    password: "{{ mysql_creds }}"
    check_implicit_admin: yes
    state: present
  when: mysql.stat.exists == false

- name: Ensure MySQL is started
  service:
    name: mysql
    enabled: yes
    state: started

- name: Grant remote user access to all databases
  mysql_user:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: localhost
    name: "{{ mysql_creds }}"
    password: "{{ mysql_creds }}"
    priv: "*.*:ALL"
    host: "{{ web_ip }}"
    state: present

- name: Ensure MySQL is restarted
  service:
    name: mysql
    enabled: yes
    state: restarted
