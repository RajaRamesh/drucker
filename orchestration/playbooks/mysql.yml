---
- name: Check if my.cnf exists
  stat:
    path: "{{ my_cnf }}"
  register: my_cnf_check
  changed_when: my_cnf_check.stat.exists == false

- name: Check if MySQL backup directory exists
  stat:
    path: "{{ mysql_backup_dir }}"
  register: backup_dir
  changed_when: backup_dir.stat.exists == false

- name: Create MySQL backup directory
  file:
    path: "{{ mysql_backup_dir }}"
    state: directory
  when: my_cnf_check.stat.exists == true and backup_dir.stat.exists == false

- name: Temporary move the MySQL backup directory
  command: mv {{ mysql_backup_dir }} {{ download_dir }}
  when: my_cnf_check.stat.exists == false and backup_dir.stat.exists == true

- name: Clean up MySQL directory
  shell: rm -Rf {{ mysql_data }}/* warn=False
  when: my_cnf_check.stat.exists == false

- name: Move back the backup directory
  command: mv {{ download_dir }}/backup {{ mysql_data }}
  when: my_cnf_check.stat.exists == false and backup_dir.stat.exists == true

- name: Install MySQL server and utilities
  package:
    name: "{{ item }}"
    state: installed
    force: yes
    update_cache: yes
  with_items:
    - mariadb-server
    - python-mysqldb
    - mytop
    # memcached
  when: my_cnf_check.stat.exists == false

- name: Check if innodb_file_per_table has been configured
  shell: grep -o "innodb_file_per_table" {{ my_cnf }} || echo "absent"
  register: innodb_file_per_table
  changed_when: innodb_file_per_table == "absent"

- name: Set innodb_file_per_table
  blockinfile:
    dest: "{{ my_cnf }}"
    block: |
      [mysqld]
      innodb_file_per_table = 1
    insertafter: EOF
    marker: "# {mark} MANAGED INNODB BLOCK"
  when: innodb_file_per_table == "absent"

- name: Check if MySQL is configured to allow remote access
  shell: grep -o "0.0.0.0" {{ my_cnf }} || echo "denied"
  register: remote_access
  changed_when: remote_access.stdout == "denied"

- name: Configure MySQL to allow remote access
  replace:
    dest: "{{ my_cnf }}"
    regexp: '^(.*)127.0.0.1(.*)$'
    replace: '\1 0.0.0.0\2'
  when: remote_access.stdout == "denied"

- name: Start MySQL
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
    - mysql
  when: my_cnf_check.stat.exists == false

- name: Set MySQL root user password
  mysql_user:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    name: "{{ mysql_creds }}"
    password: "{{ mysql_creds }}"
    check_implicit_admin: yes
    state: present
  when: my_cnf_check.stat.exists == false

- name: Ensure MySQL is started
  service:
    name: mysql
    enabled: yes
    state: started

- name: Grant remote user access to all databases
  mysql_user:
    login_user: "{{ mysql_creds }}"
    login_password: "{{ mysql_creds }}"
    login_host: localhost
    name: "{{ mysql_creds }}"
    password: "{{ mysql_creds }}"
    priv: "*.*:ALL"
    host: "{{ web_ip }}"
    state: present

- name: Ensure MySQL is restarted
  service:
    name: mysql
    enabled: yes
    state: restarted
