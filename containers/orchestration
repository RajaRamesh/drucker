#!/usr/bin/env bash

run_base_container_orchestration() {
  echo -e "${BLUE}Running ${BASE_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ansible-playbook -i "${DIR}"/orchestration/hosts "${DIR}"/orchestration/base.yml --user="${USER}" --extra-vars "ansible_sudo_pass=${USER}"
}

start_reverse_proxy_services() {
  for SERVICE in ${REVERSE_PROXY_SERVICES}; do
    docker exec -it "${REVERSE_PROXY_CONTAINER}" /etc/init.d/"${SERVICE}" restart
  done
}

run_reverse_proxy_container_orchestration() {
  echo -e "${BLUE}Running ${REVERSE_PROXY_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ansible-playbook -i "${DIR}"/orchestration/hosts "${DIR}"/orchestration/reverse_proxy.yml --user="${USER}" --extra-vars "ansible_sudo_pass=${USER}"

  start_reverse_proxy_services
}

start_web_services() {
  for SERVICE in ${WEB_SERVICES}; do
    docker exec -it "${WEB_CONTAINER}" /etc/init.d/"${SERVICE}" restart
  done
}

run_web_container_orchestration() {
  echo -e "${BLUE}Running ${WEB_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ansible-playbook -i "${DIR}"/orchestration/hosts "${DIR}"/orchestration/web.yml --user="${USER}" --extra-vars "ansible_sudo_pass=${USER}"

  start_web_services
}

run_gluster_container_orchestration() {
  echo -e "${BLUE}Running ${GLUSTER_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ansible-playbook -i "${DIR}"/orchestration/hosts "${DIR}"/orchestration/gluster.yml --user="${USER}" --extra-vars "ansible_sudo_pass=${USER}"
}
