#!/usr/bin/env bash

export HOST_KEY_CHECKING='export ANSIBLE_HOST_KEY_CHECKING=False'
export PLAYBOOKS="ansible-playbook -i ${DIR}/orchestration/hosts --user=${USER} ${DIR}/orchestration"
export COMMANDS="${PLAYBOOKS}/commands"
export PROVISIONING="${PLAYBOOKS}/provisioning"
export TESTS="${PLAYBOOKS}/_tests"
export EXTRA_VARS="--extra-vars ansible_sudo_pass=${USER}"

user_confirmation() {
  read -p "The ${SITE} docroot already exists. Should we overwrite the codebase, files and database? [Y/n] "
}

cancellation() {
  echo -e "${GREEN}Back to the comfort zone. Aborting.${COLOR_ENDING}"
  exit 0
}

failure() {
  echo "Sorry, the only accepted input characters are [Yy/Nn]. Aborting..."
  exit 0
}

hosts_file() {
  echo -e "${GREEN}Remember to add the ${SITE}.local entry to your local /etc/hosts file!${COLOR_ENDING}"
}

# In several of the below functions, SITE is the result of SITENAME supporting
# a comma-separated list of sites. See functions/arguments file for details.

app_dev() {
  echo -e "${BLUE}Configuring ${SITE} docroot for development...${COLOR_ENDING}"
  ${COMMANDS}/app-dev.yml --extra-vars "ansible_sudo_pass=${USER} dev=Y sitename=${SITE}"
}

app_prod() {
  echo -e "${BLUE}Configuring ${SITE} docroot for production...${COLOR_ENDING}"
  ${COMMANDS}/app-prod.yml --extra-vars "ansible_sudo_pass=${USER} prod=Y sitename=${SITE}"
}

app_import() {
  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      app_delete
      app_import
    fi
  else
    echo -e "${BLUE}Importing site into new docroot ${SITE}...${COLOR_ENDING}"
    ${COMMANDS}/app-import.yml --extra-vars "ansible_sudo_pass=${USER} import=Y sitename=${SITE}"
    hosts_file
  fi
}

app_drupal() {
  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      app_delete
      app_drupal
    fi
  else
    if [[ -z "${GIT_TAG}" ]]; then
      echo -e "${BLUE}Creating site into new ${SITE} docroot...${COLOR_ENDING}"
      ${COMMANDS}/app-drupal.yml --extra-vars "ansible_sudo_pass=${USER} create=Y sitename=${SITE}"
      hosts_file
    elif [[ -n "${GIT_TAG}" ]]; then
      echo -e "${BLUE}Creating Drupal ${GIT_TAG} site into new ${SITE} docroot...${COLOR_ENDING}"
      ${COMMANDS}/app-drupal.yml --extra-vars "ansible_sudo_pass=${USER} create=Y sitename=${SITE} git_tag=${GIT_TAG}"
      hosts_file
    fi
  fi
}

app_blt() {
  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      app_delete
      app_blt
    fi
  else
    echo -e "${BLUE}Provisioning BLT into new ${SITE} docroot...${COLOR_ENDING}"
    ${COMMANDS}/app-blt.yml --extra-vars "ansible_sudo_pass=${USER} blt=Y sitename=${SITE}"
    hosts_file
  fi
}

app_lightning() {
  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      app_delete
      app_lightning
    fi
  else
    echo -e "${BLUE}Installing Lightning site into new ${SITE} docroot...${COLOR_ENDING}"
    ${COMMANDS}/app-lightning.yml --extra-vars "ansible_sudo_pass=${USER} lightning=Y sitename=${SITE}"
    hosts_file
  fi
}

app_reservoir() {
  echo "Installing Reservoir on PHP ${DEFAULT_PHP} is currently broken."
  echo "Wait until Drupal 8.5.0 is released or install drucker 0.5.8"
  exit 0

  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      app_delete
      app_reservoir
    fi
  else
    echo -e "${BLUE}Installing Reservoir site into new ${SITE} docroot...${COLOR_ENDING}"
    ${COMMANDS}/app-reservoir.yml --extra-vars "ansible_sudo_pass=${USER} reservoir=Y sitename=${SITE}"
    hosts_file
  fi
}

app_delete() {
  echo -e "${BLUE}Deleting docroot ${SITE}...${COLOR_ENDING}"
  ${COMMANDS}/app-delete.yml --extra-vars "ansible_sudo_pass=${USER} delete=Y sitename=${SITE}"
  echo -e "${GREEN}Remember to remove the ${SITE}.local entry from your local /etc/hosts file!${COLOR_ENDING}"
}

set_previous_php_version() {
  echo -e "${BLUE}Switch to ${PREVIOUS_PHP}...${COLOR_ENDING}"
  ${COMMANDS}/previous-php.yml --extra-vars "ansible_sudo_pass=${USER}"
}

set_default_php_version() {
  echo -e "${BLUE}Switch to ${DEFAULT_PHP}...${COLOR_ENDING}"
  ${COMMANDS}/default-php.yml --extra-vars "ansible_sudo_pass=${USER}"
}

run_tests() {
  if [[ $(docker exec -u "${USER}" -it "${WEB_CONTAINER}" /bin/cat /etc/php/default_php_version) != ${DEFAULT_PHP} ]]; then
    echo "Tests need to be executed against the current stable PHP version"
    echo "Please switch to PHP ${DEFAULT_PHP} with 'drucker php:${DEFAULT_PHP}'"
    exit 0
  fi

  echo -e "${BLUE}Running the system test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${TESTS}/system-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the mirror test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${TESTS}/mirror-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the reverse proxy test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${TESTS}/reverse-proxy-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the database test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${TESTS}/db-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the search test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${TESTS}/search-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the web test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${TESTS}/web-tests.yml ${EXTRA_VARS}
}

run_base_container_orchestration() {
  echo -e "${BLUE}Running ${BASE_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PROVISIONING}/base.yml ${EXTRA_VARS}
}

run_mirror_container_orchestration() {
  echo -e "${BLUE}Running ${MIRROR_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PROVISIONING}/mirror.yml ${EXTRA_VARS}
}

run_reverse_proxy_container_orchestration() {
  echo -e "${BLUE}Running ${REVERSE_PROXY_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PROVISIONING}/reverse_proxy.yml ${EXTRA_VARS}
}

run_ssh_container_orchestration() {
  echo -e "${BLUE}Running SSH orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PROVISIONING}/ssh.yml ${EXTRA_VARS}
}

run_web_container_orchestration() {
  echo -e "${BLUE}Running ${WEB_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PROVISIONING}/web.yml ${EXTRA_VARS}
}

run_db_container_orchestration() {
  echo -e "${BLUE}Running ${DB_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PROVISIONING}/db.yml ${EXTRA_VARS}
}

run_search_container_orchestration() {
  echo -e "${BLUE}Running ${SEARCH_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PROVISIONING}/search.yml ${EXTRA_VARS}
}
