#!/usr/bin/env bash

export HOST_KEY_CHECKING='export ANSIBLE_HOST_KEY_CHECKING=False'
export PLAYBOOK="ansible-playbook -i ${DIR}/orchestration/hosts --user=${USER} ${DIR}/orchestration"
export EXTRA_VARS="--extra-vars ansible_sudo_pass=${USER}"

# In several of the below functions, SITE is the result of SITENAME supporting
# a comma-separated list of sites. See functions/arguments file for details.

drupal_dev_mode() {
  echo -e "${BLUE}Configuring ${SITE} docroot for development...${COLOR_ENDING}"
  ${PLAYBOOK}/dev.yml --extra-vars "ansible_sudo_pass=${USER} dev=Y sitename=${SITE}"
}

drupal_prod_mode() {
  echo -e "${BLUE}Configuring ${SITE} docroot for production...${COLOR_ENDING}"
  ${PLAYBOOK}/prod.yml --extra-vars "ansible_sudo_pass=${USER} prod=Y sitename=${SITE}"
}

import_site() {
  echo -e "${BLUE}Importing site into new docroot ${SITE}...${COLOR_ENDING}"
  ${PLAYBOOK}/import.yml --extra-vars "ansible_sudo_pass=${USER} import=Y sitename=${SITE}"
}

user_confirmation() {
  read -p "The ${SITE} docroot already exists. Should we overwrite the codebase, files and database? [Y/n] "
}

cancellation() {
  echo -e "${GREEN}Back to the comfort zone. Aborting.${COLOR_ENDING}"
  exit 0
}

failure() {
  echo "Sorry, the only accepted input characters are [Yy/Nn]. Aborting..."
  exit 0
}

hosts_file() {
  echo -e "${GREEN}Remember to add the ${SITE}.local entry to your local /etc/hosts file!${COLOR_ENDING}"
}

drupal_create() {
  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      delete_site
      drupal_create
    fi
  else
    if [[ -z "${GIT_TAG}" ]] && [[ -z "${GIT_COMMIT}" ]]; then
      echo -e "${BLUE}Creating site into new ${SITE} docroot...${COLOR_ENDING}"
      ${PLAYBOOK}/create.yml --extra-vars "ansible_sudo_pass=${USER} create=Y sitename=${SITE}"
      hosts_file
    elif [[ -n "${GIT_TAG}" ]]; then
      if [[ " ${GIT_TAGS[*]} " == *" ${GIT_TAG} "* ]]; then
        echo -e "${BLUE}Creating Drupal ${GIT_TAG} site into new ${SITE} docroot...${COLOR_ENDING}"
        ${PLAYBOOK}/create-tag.yml --extra-vars "ansible_sudo_pass=${USER} create=Y sitename=${SITE} git_tag=${GIT_TAG}"
        hosts_file
      else
        echo -e "\n${RED}This git tag doesn't seem to exist.${COLOR_ENDING}\n"
        drucker_usage
      fi
    elif [[ -n "${GIT_COMMIT}" ]]; then
      if [[ " ${GIT_COMMITS[*]} " == *" ${GIT_COMMIT} "* ]]; then
        echo -e "${BLUE}Creating Drupal site from commit ID ${GIT_COMMIT} into new ${SITE} docroot...${COLOR_ENDING}"
        ${PLAYBOOK}/create-commit.yml --extra-vars "ansible_sudo_pass=${USER} create=Y sitename=${SITE} git_commit=${GIT_COMMIT}"
        hosts_file
      else
        echo -e "\n${RED}This git commit doesn't seem to exist. Remember to use a short hash.${COLOR_ENDING}\n"
        drucker_usage
      fi
    fi
  fi
}

blt_create() {
  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      delete_site
      create_blt_builds
    fi
  else
    echo -e "${BLUE}Provisioning BLT into new ${SITE} docroot...${COLOR_ENDING}"
    ${PLAYBOOK}/blt-create.yml --extra-vars "ansible_sudo_pass=${USER} blt=Y sitename=${SITE}"
    hosts_file
  fi
}

drupal_lightning() {
  echo "Installing Lightning on PHP 7.2 is currently broken."
  echo "Wait until Drupal 8.5.0 is released or install drucker 0.5.8"
  exit 0

  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      delete_site
      drupal_lightning
    fi
  else
    echo -e "${BLUE}Installing Lightning site into new ${SITE} docroot...${COLOR_ENDING}"
    ${PLAYBOOK}/drupal-lightning.yml --extra-vars "ansible_sudo_pass=${USER} lightning=Y sitename=${SITE}"
    hosts_file
  fi
}

drupal_reservoir() {
  echo "Installing Reservoir on PHP 7.2 is currently broken."
  echo "Wait until Drupal 8.5.0 is released or install drucker 0.5.8"
  exit 0

  if [[ -d ${LOCAL_HTML_PATH}/${SITE} ]]; then
    user_confirmation
    if [[ ${REPLY} =~ ^[Nn]$ ]]; then
      cancellation
    elif [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
      failure
    else
      delete_site
      drupal_reservoir
    fi
  else
    echo -e "${BLUE}Installing Reservoir site into new ${SITE} docroot...${COLOR_ENDING}"
    ${PLAYBOOK}/drupal-reservoir.yml --extra-vars "ansible_sudo_pass=${USER} reservoir=Y sitename=${SITE}"
    hosts_file
  fi
}

delete_site() {
  echo -e "${BLUE}Deleting docroot ${SITE}...${COLOR_ENDING}"
  ${PLAYBOOK}/delete.yml --extra-vars "ansible_sudo_pass=${USER} delete=Y sitename=${SITE}"
  echo -e "${GREEN}Remember to remove the ${SITE}.local entry from your local /etc/hosts file!${COLOR_ENDING}"
}

run_tests() {
  echo -e "${BLUE}Running the system test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/system-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the mirror test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/mirror-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the reverse proxy test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/reverse-proxy-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the database test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/db-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the search test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/search-tests.yml ${EXTRA_VARS}

  echo -e "${BLUE}Running the web test suite...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/web-tests.yml ${EXTRA_VARS}
}

run_base_container_orchestration() {
  echo -e "${BLUE}Running ${BASE_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/base.yml ${EXTRA_VARS}
}

run_mirror_container_orchestration() {
  echo -e "${BLUE}Running ${MIRROR_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/mirror.yml ${EXTRA_VARS}
}

run_reverse_proxy_container_orchestration() {
  echo -e "${BLUE}Running ${REVERSE_PROXY_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/reverse_proxy.yml ${EXTRA_VARS}
}

run_ssh_container_orchestration() {
  echo -e "${BLUE}Running SSH orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/ssh.yml ${EXTRA_VARS}
}

run_web_container_orchestration() {
  echo -e "${BLUE}Running ${WEB_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/web.yml ${EXTRA_VARS}
}

run_db_container_orchestration() {
  echo -e "${BLUE}Running ${DB_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/db.yml ${EXTRA_VARS}
}

run_search_container_orchestration() {
  echo -e "${BLUE}Running ${SEARCH_CONTAINER} orchestration on the container...${COLOR_ENDING}"

  ${HOST_KEY_CHECKING}
  ${PLAYBOOK}/search.yml ${EXTRA_VARS}
}
