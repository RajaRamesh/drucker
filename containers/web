#!/usr/bin/env bash

WEB_CONTAINER_EXISTS=$(docker ps -a | grep -o "${WEB_CONTAINER}")
WEB_IMAGE_EXISTS=$(docker images | awk '{print $1":"$2}' | grep "${WEB_IMAGE}")
WEB_CONTAINER_STARTED=$(docker ps | grep -o "${WEB_CONTAINER}")

local_directory_mapping() {
  read -p "Enter local path to store drucker sites [${DEFAULT_HOST_PATH}]: " HOST_PATH
  HOST_PATH=${HOST_PATH:-$DEFAULT_HOST_PATH}
}

create_web_container_from_base_image() {
  echo -e "${BLUE}Spinning up ${WEB_CONTAINER} container with ID:${COLOR_ENDING}"

  local_directory_mapping

  docker run --privileged=true --name "${WEB_CONTAINER}" -it \
  -h "${DRUCKER_HOSTNAME}" \
  --net "${NETWORK}" \
  --ip "${WEB_IP}" \
  -d -p "${HOST_WEB_PORT}":"${WEB_PORT}" \
  -p "${HOST_TCP_GLUSTER_DAEMON_WEB}":"${TCP_GLUSTER_DAEMON_WEB}" \
  -p "${HOST_TCP_GLUSTER_BRICK_WEB}":"${TCP_GLUSTER_BRICK_WEB}" \
  -p "${HOST_TCP_PORT_MAPPER_WEB}":"${TCP_PORT_MAPPER_WEB}" \
  -v "${HOST_PATH}":"${CONTAINER_PATH}" \
  "${BASE_IMAGE}" bash

  configure_web_container_ssh_access
  run_web_container_orchestration
}

create_web_container_from_web_image() {
  echo -e "${BLUE}Spinning up ${WEB_CONTAINER} container with ID:${COLOR_ENDING}"

  local_directory_mapping

  docker run --privileged=true --name "${WEB_CONTAINER}" -it \
  -h "${DRUCKER_HOSTNAME}" \
  --net "${NETWORK}" \
  --ip "${WEB_IP}" \
  -d -p "${HOST_WEB_PORT}":"${WEB_PORT}" \
  -p "${HOST_TCP_GLUSTER_DAEMON_WEB}":"${TCP_GLUSTER_DAEMON_WEB}" \
  -p "${HOST_TCP_GLUSTER_BRICK_WEB}":"${TCP_GLUSTER_BRICK_WEB}" \
  -p "${HOST_TCP_PORT_MAPPER_WEB}":"${TCP_PORT_MAPPER_WEB}" \
  -v "${HOST_PATH}":"${CONTAINER_PATH}" \
  "${WEB_IMAGE}" bash

  configure_web_container_ssh_access
  run_web_container_orchestration
}

create_web_image_from_web_container() {
  echo -e "${BLUE}Committing ${WEB_IMAGE} image from ${WEB_CONTAINER} container...${COLOR_ENDING}"

  docker commit -m "${WEB_CONTAINER} on $(date +"%Y-%m-%d")" "${WEB_CONTAINER}" "${WEB_IMAGE}"

  echo -e "${BLUE}Deleting initial container...${COLOR_ENDING}"
  docker rm -f "${WEB_CONTAINER}"
  create_web_container_from_web_image
}

start_web_container() {
  docker start "${WEB_CONTAINER}" > /dev/null 2>&1
}

provision_web_container() {
  if [[ ${WEB_CONTAINER_EXISTS} ]]; then
    echo -e "${GREEN}${WEB_CONTAINER} container already exists.${COLOR_ENDING}"

    if [[ ! ${WEB_CONTAINER_STARTED} ]]; then
      echo -e "${BLUE}Starting ${WEB_CONTAINER} container...${COLOR_ENDING}"
      start_web_container
      run_web_container_orchestration
    else
      run_web_container_orchestration
    fi
  else
    if [[ ${WEB_IMAGE_EXISTS} ]]; then
      echo -e "${GREEN}${WEB_IMAGE} custom image already exists.${COLOR_ENDING}"
      create_web_container_from_web_image
    else
      create_web_container_from_base_image
      create_web_image_from_web_container
    fi
  fi
}
