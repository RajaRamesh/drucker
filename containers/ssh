#!/usr/bin/env bash

configure_ssh_access() {
  if [[ (! ${WEB_CONTAINER_EXISTS}) || (! ${REVERSE_PROXY_CONTAINER_EXISTS}) ]]; then
    read -p "Enter path to SSH public key [${DEFAULT_SSH_PATH}]: " PUBKEY
    PUBKEY=${PUBKEY:-$DEFAULT_SSH_PATH}

    echo -e "${BLUE}Configuring SSH access to the container...${COLOR_ENDING}"
  fi
}

configure_base_container_ssh_access() {
  cat "${PUBKEY}" > /tmp/authorized_keys

  docker cp /tmp/authorized_keys "${BASE_CONTAINER}":/home/"${USER}"/.ssh/authorized_keys

  docker exec -it "${BASE_CONTAINER}" chown -R "${USER}":"${USER}" /home/"${USER}"/.ssh

  rm /tmp/authorized_keys
}

configure_reverse_proxy_ssh_access() {
  cat "${PUBKEY}" > /tmp/authorized_keys

  docker cp /tmp/authorized_keys "${REVERSE_PROXY_CONTAINER}":/home/"${USER}"/.ssh/authorized_keys

  docker exec -it "${REVERSE_PROXY_CONTAINER}" chown -R "${USER}:${USER}" /home/"${USER}"/.ssh

  rm /tmp/authorized_keys
}

configure_web_container_ssh_access() {
  cat "${PUBKEY}" > /tmp/authorized_keys

  docker cp /tmp/authorized_keys "${WEB_CONTAINER}":/home/"${USER}"/.ssh/authorized_keys

  docker exec -it "${WEB_CONTAINER}" chown -R "${USER}":"${USER}" /home/"${USER}"/.ssh

  rm /tmp/authorized_keys
}

configure_web2_container_ssh_access() {
  cat "${PUBKEY}" > /tmp/authorized_keys

  docker cp /tmp/authorized_keys "${WEB2_CONTAINER}":/home/"${USER}"/.ssh/authorized_keys

  docker exec -it "${WEB2_CONTAINER}" chown -R "${USER}":"${USER}" /home/"${USER}"/.ssh

  rm /tmp/authorized_keys
}
